4)construt a python program applying the concept of file handling

def count_word_frequency(file_name):
    word_freq = {}
    with open(file_name, 'r') as file:
        for line in file:
            words = line.strip().split()
            for word in words:
                word = word.strip('.,?!:;').lower()
                if word:
                    word_freq[word] = word_freq.get(word, 0) + 1
    return word_freq

def write_word_frequency(word_freq, output_file):
    with open(output_file, 'w') as file:
        for word, freq in word_freq.items():
            file.write(f"{word}: {freq}\n")

input_file = "input.txt"
output_file = "word_frequency.txt"

word_freq = count_word_frequency(input_file)
write_word_frequency(word_freq, output_file)
print("Word frequencies written to", output_file)




5)develop a program in python employing the concept of classes and objects

class Student:
    def _init_(self, name, age, grade):
        self.name = name
        self.age = age
        self.grade = grade

    def display_info(self):
        print(f"Name: {self.name}")
        print(f"Age: {self.age}")
        print(f"Grade: {self.grade}")

    def promote(self):
        self.grade += 1
        print(f"{self.name} has been promoted to grade {self.grade}")

# Creating objects of the Student class
student1 = Student("Alice", 15, 10)
student2 = Student("Bob", 14, 9)

# Displaying information about the students
print("Information about student 1:")
student1.display_info()
print("\nInformation about student 2:")
student2.display_info()

# Promoting student1
student1.promote()


6)construct a python program showcasing the utilization of NUMPy: Array objects

import numpy as np

# Creating NumPy arrays
array1 = np.array([1, 2, 3, 4, 5])  # 1D array
array2 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  # 2D array

# Displaying the arrays
print("1D Array:")
print(array1)
print("\n2D Array:")
print(array2)

# Basic operations with NumPy arrays
print("\nSum of elements in array1:", np.sum(array1))
print("Mean of elements in array2:", np.mean(array2))
print("Transpose of array2:")
print(np.transpose(array2))

# Reshaping array
reshaped_array = array1.reshape(5, 1)
print("\nReshaped array:")
print(reshaped_array)

# Element-wise multiplication
array3 = np.array([2, 3, 4, 5, 6])
elementwise_mult = np.multiply(array1, array3)
print("\nElement-wise multiplication of array1 and array3:")
print(elementwise_mult)

create a python program to illustrate data visualization through seaborn
import seaborn as sns
import matplotlib.pyplot as plt

# Load Iris dataset
iris = sns.load_dataset('iris')

# Pairplot
sns.pairplot(iris, hue='species', markers=["o", "s", "D"])
plt.title('Pairplot of Iris Dataset')
plt.show()

# Boxplot of sepal length by species
sns.boxplot(x='species', y='sepal_length', data=iris)
plt.title('Boxplot of Sepal Length by Species')
plt.show()

# Violinplot of petal length by species
sns.violinplot(x='species', y='petal_length', data=iris)
plt.title('Violinplot of Petal Length by Species')
plt.show()








1.	Develop a Python program incorporating basic data types
         (Numeric (int, float), list, tuple, set, dictionaries and string
# Numeric data types
num_int = 10
num_float = 3.14

# List
my_list = [1, 2, 3, 4, 5]

# Tuple
my_tuple = (6, 7, 8, 9, 10)

# Set
my_set = {1, 2, 3, 4, 5}

# Dictionary
my_dict = {'a': 1, 'b': 2, 'c': 3}

# String
my_string = "Hello, World!"

# Printing all data types
print("Integer:", num_int)
print("Float:", num_float)
print("List:", my_list)
print("Tuple:", my_tuple)
print("Set:", my_set)
print("Dictionary:", my_dict)
print("String:", my_string)


2.	Create a Python program demonstrating various control
statements.
[2:16 pm, 24/4/2024] Reshub M(Extc; College): x = 10
if x > 5:
    print("x is greater than 5")
else:
    print("x is less than or equal to 5")

# for loop
numbers = [1, 2, 3, 4, 5]
for num in numbers:
    print(num)

# while loop
count = 0
while count < 5:
    print("Count:", count)
    count += 1

# break statement
for i in range(10):
    if i == 5:
        break
    print(i)

# continue statement
for i in range(10):
    if i % 2 == 0:
        continue
    print(i)

# nested loops
for i in range(3):
    for j in range(2):
        print(i, j)

# pass statement
for i in range(5):
    if i == 3:
        pass
    else:
        print(i)




















3.	Design a program in Python integrating the concept of functions.


# Function with no arguments and no return value
def greet():
    print("Hello, welcome to the program!")

# Function with arguments but no return value
def print_sum(a, b):
    print("Sum of", a, "and", b, "is:", a + b)

# Function with arguments and return value
def calculate_circle_area(radius):
    return 3.14 * radius ** 2

# Function with default arguments
def greet_person(name="Guest"):
    print("Hello,", name, "!")

# Function with variable number of arguments
def add(*args):
    return sum(args)

# Recursive function
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

# Lambda function
double = lambda x: x * 2

# Example usage of functions
greet()
print_sum(5, 3)
print("Area of circle:", calculate_circle_area(2))
greet_person("Alice")
greet_person()
print("Sum:", add(1, 2, 3, 4, 5))
print("Factorial of 5:", factorial(5))
print("Double of 5:", double(5)







